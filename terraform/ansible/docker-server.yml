---

- hosts: "{{ hosts }}"
  become: yes
  remote_user: ec2-user
  become_user: root

  tasks:

    - name: Update all packages
      yum:
        name: '*'
        state: latest
        update_only: yes

    - name: Ensure a list of yum packages are installed
      yum:
        name: "{{ packages }}"
        state: latest
        update_cache: yes
      vars:
        packages:
          - python-pip
          - yum-utils
          - device-mapper-persistent-data
          - lvm2
          - amazon-linux-extras

    - name: Add extras repository
      shell: yum-config-manager --enable extras

    - name: Install docker-ce (centos) via amazon-linux-extras packages
      shell: "amazon-linux-extras install docker=stable -y"

    - name: Add ansible repository
      shell: "amazon-linux-extras enable ansible2"

    - name: Install Ansible
      shell: "yum install -y ansible"

    - name: Enable Docker CE service at startup
      service:
        name: docker
        state: started
        enabled: yes

    - name: Ensure Python pip packages are installed
      pip:
        name: "{{ packages }}"
      vars:
        packages:
          - boto
          - boto3
          - docker-compose

    - name: Add user ec2-user to docker group
      user:
        name: ec2-user
        groups: docker
        append: yes

    - name: Add user jenkins to docker group
      user:
        name: dockeradmin
        groups: docker
        password: dockeradmin
        append: yes

    - name: Add user ansadmin to docker and root groups
      user:
        name: ansadmin
        password: ansadmin
        groups:
          - docker
          - sudo
        state: present
        shell: /bin/bash
        system: no
        create_home: yes
        home: /home/ansadmin

    - name: Gathering user home directory location
      local_action: shell echo $HOME
      register: userhome
      ignore_errors: true

    - name: Copy keys added to authorized_keys
      authorized_key:
        user=root
        key="{{ lookup('file', 'authorized_keys') }}"

    - name: Copy id_rsa.pub if found locally
      authorized_key:
        user=root
        key="{{ lookup('file', '{{ userhome.stdout }}/.ssh/id_rsa.pub') }}"
        manage_dir=yes
      ignore_errors: true
